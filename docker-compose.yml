# This setup is suitable for local development and early-stage deployments.
# TODO: For production, consider Kubernetes or a managed container platform for auto-scaling and rolling updates.


services:
  app:
    build: .
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app:/app/app
    volumes:
      - .:/code
    command: bash -c "cd app && python wait_for_db.py && uvicorn main:app --host 0.0.0.0 --port 8000 --reload"

  db:
    image: postgres
    env_file:
      - .env
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "user", "-d", "todoapp" ]
      interval: 1s
      timeout: 1s
      retries: 10

  redis:
    image: redis
    ports:
      - "6379:6379"

  worker:
    build: .
    command: celery --app=app.celery_app.worker:celery_app worker --loglevel=info
    env_file:
      - .env
    depends_on:
      - redis
      - db
  beat:
    build: .
    command: celery --app=app.celery_app.beat:celery_app beat --loglevel=info
    env_file:
      - .env
    depends_on:
      - redis
      - db
    volumes:
      - ./beat-data:/app/beat-data
    working_dir: /app
    environment:
      - CELERY_BEAT_SCHEDULE_FILENAME=beat-data/celerybeat-schedule